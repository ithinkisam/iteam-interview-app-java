/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.securian.invest.example;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.util.ArrayList;
import java.util.List;
import com.opencsv.CSVReader;
import com.opencsv.CSVWriter;
import com.securian.invest.example.aggregate.Aggregator;
import com.securian.invest.example.aggregate.AggregatorFactory;
import com.securian.invest.example.domain.SummaryRecord;
import com.securian.invest.example.domain.TradeData;
import com.securian.invest.example.io.LineMapper;
import com.securian.invest.example.io.ItemMapper;
import com.securian.invest.example.io.TradeDataItemMapper;
import com.securian.invest.example.io.SummaryRecordLineMapper;

public class App {

    public static void main(String[] args) throws Exception {
        Configuration config = Configuration.parseArgs(args);

        // read
        FileReader fileReader = new FileReader(config.getInput());
        CSVReader csvReader = new CSVReader(fileReader);
    	
        ItemMapper<TradeData> mapper = new TradeDataItemMapper("M/d/yyyy");
        List<TradeData> trades = new ArrayList<>();

        try {
            List<String[]> records = csvReader.readAll();
            for (String[] record : records) {
            	trades.add(mapper.mapRow(record));
            }
            System.out.println("Read "+ trades.size() +" valid trade data records!");
        } finally {
            csvReader.close();
            fileReader.close();
        }

        // process
        Aggregator<TradeData, SummaryRecord> aggregator = new AggregatorFactory()
                .getAggregator(config.getReportType().toString());
        List<SummaryRecord> summaryList = aggregator.doAggregate(trades);

        // write
        File file = new File(config.getOutput());
        if (!file.exists()) {
        	file.createNewFile();
        }
        FileWriter fileWriter = new FileWriter(config.getOutput());
        CSVWriter csvWriter = new CSVWriter(fileWriter);
        LineMapper<SummaryRecord> lineMapper = new SummaryRecordLineMapper();
        
        for (SummaryRecord summaryRecord : summaryList) {
            csvWriter.writeNext(lineMapper.mapLine(summaryRecord));
        }
       
        System.out.println("Wrote "+ summaryList.size() +" summary records!");
        csvWriter.close();
    }
}
